<resources xmlns:tools="http://schemas.android.com/tools">
    <!-- Base application theme. -->
    <style name="Theme.BeinConnectMoviesApp" parent="Theme.MaterialComponents.DayNight.NoActionBar">
        <!-- Primary brand color. -->
        <item name="colorPrimary">@color/black</item>
        <item name="colorPrimaryVariant">@color/black</item>
        <item name="colorOnPrimary">@color/white</item>
        <!-- Secondary brand color. -->
        <item name="colorSecondary">@color/teal_200</item>
        <item name="colorSecondaryVariant">@color/teal_700</item>
        <item name="colorOnSecondary">@color/black</item>
        <!-- Status bar color. -->
        <item name="android:statusBarColor" tools:targetApi="l">?attr/colorPrimaryVariant</item>
        <!-- Customize your theme here. -->
        <item name="textInputStyle">@style/Widget.App.TextInputLayout</item>
        <item name="appBarLayoutStyle">@style/Base_AppBarLayout</item>
    </style>

    <style name="Base_ToolbarStyle">
        <item name="popupTheme">@style/ThemeOverlay.AppCompat.Light</item>
        <item name="android:theme">@style/Base_ToolbarTheme</item>
        <item name="titleTextAppearance">@style/CustomTitleTextAppearance</item>
        <item name="subtitleTextAppearance">@style/CustomSubTitleTextAppearance</item>
    </style>

    <style name="Base_ToolbarTheme">
        <!-- Color used for the title of the Toolbar - as long as not overridden -->
        <item name="android:textColorPrimary">@color/white</item>
        <!-- Used to color back button and three dots -->
        <item name="android:textColorSecondary">@color/white</item>
    </style>

    <style name="CustomTitleTextAppearance" parent="TextAppearance.Widget.AppCompat.Toolbar.Title">
        <item name="android:textSize">18sp</item>
        <item name="android:textColor">@color/white</item>
        <item name="android:textStyle">bold</item>
    </style>

    <style name="CustomSubTitleTextAppearance" parent="TextAppearance.Widget.AppCompat.Toolbar.Subtitle">
        <item name="android:textSize">14sp</item>
        <item name="android:textColor">@color/white</item>
        <item name="android:textStyle">italic</item>
    </style>


    <style name="Widget.App.TextInputLayout" parent="Widget.MaterialComponents.TextInputLayout.OutlinedBox">
        <item name="materialThemeOverlay">@style/ThemeOverlay.App.TextInputLayout</item>
        <!--<item name="hintTextColor">?attr/colorOnSurface</item>-->   //When you added this line it will applies only one color in normal and activate state i.e colorOnSurface color
    </style>

    <style name="ThemeOverlay.App.TextInputLayout" parent="">
        <item name="colorPrimary">@color/white</item>  //Activated color
        <item name="colorOnSurface">@color/white</item>    //Normal color
        <item name="colorError">@color/white</item>        //Error color

        <!--Note: When setting a materialThemeOverlay on a custom TextInputLayout style, don’t forget to set editTextStyle to either a @style/Widget.MaterialComponents.TextInputEditText.* style or to a custom one that inherits from that.
        The TextInputLayout styles set materialThemeOverlay that overrides editTextStyle with the specific TextInputEditText style needed. Therefore, you don’t need to specify a style tag on the edit text.-->
        <item name="editTextStyle">@style/Widget.MaterialComponents.TextInputEditText.OutlinedBox</item>
    </style>


    <style name="Base_AppBarLayout" parent="Widget.Design.AppBarLayout">
        <item name="background">@color/black</item>
    </style>

</resources>